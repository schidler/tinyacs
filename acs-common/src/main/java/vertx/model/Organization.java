package vertx.model;

import vertx.VertxJsonUtils;
import vertx.util.AcsConstants;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import io.vertx.core.json.JsonObject;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

/**
 * Project:  cwmp
 *
 * This class defines the data model for the Organization Objects.
 *
 * Each organization shall include the following attributes:
 * 1. Name
 * 2. Description
 * 3. Organization ID String (to be included by all multi-tenant objects/documents).
 * 4. Per-Organization ACS URL
 * 5. ACS Credential (username/password).
 * 6. TODO: Enable/Disable STUN
 *    If STUN is enabled, the STUN Server URL needs to be configured which is likely the same STUN server instance
 *    running in our AWS cloud that serves all organizations.
 *
 * @author: ronyang
 */
public class Organization {
    private static final Logger log = LoggerFactory.getLogger(Organization.class.getName());

    /**
     * DB Collection for CPE Devices
     */
    public static final String DB_COLLECTION_NAME = "CWMP-organizations";

    /**
     * Field Name Constant(s)
     */
    public static final String FIELD_NAME_ID = AcsConstants.FIELD_NAME_ID;
    public static final String FIELD_NAME_NAME = AcsConstants.FIELD_NAME_NAME;
    public static final String FIELD_NAME_DESCRIPTION = AcsConstants.FIELD_NAME_DESCRIPTION;
    public static final String FIELD_NAME_URL = "url";
    public static final String FIELD_NAME_USERNAME = "username";
    public static final String FIELD_NAME_PASSWORD = "password";
    public static final String FIELD_NAME_API_CLIENT_USERNAME = "apiClientUsername";
    public static final String FIELD_NAME_API_CLIENT_PASSWORD = "apiClientPassword";
    // External Image Server (a JsonObject with up to 5 fields: baseUrl, username, password, name and description)
    public static final String FIELD_NAME_EXTERNAL_IMAGE_SERVER = "externalImageServer";
    public static final String FIELD_NAME_BASE_URL = "baseUrl";
    // Hostname of the Internal Proxy that is needed to reach devices with private IP addresses (and the file servers)
    public static final String FIELD_NAME_INTERNAL_PROXY = "internalProxy";

    /**
     * Define static JSON Field Validators
     */
    public static final VertxJsonUtils.JsonFieldValidator MANDATORY_FIELDS =
            new VertxJsonUtils.JsonFieldValidator()
                    .append(FIELD_NAME_ID, VertxJsonUtils.JsonFieldType.String)
                    .append(FIELD_NAME_NAME, VertxJsonUtils.JsonFieldType.String)
                    .append(FIELD_NAME_URL, VertxJsonUtils.JsonFieldType.String)
                    .append(FIELD_NAME_API_CLIENT_USERNAME, VertxJsonUtils.JsonFieldType.String)
                    .append(FIELD_NAME_API_CLIENT_PASSWORD, VertxJsonUtils.JsonFieldType.String)
                    .append(FIELD_NAME_USERNAME, VertxJsonUtils.JsonFieldType.String)
                    .append(FIELD_NAME_PASSWORD, VertxJsonUtils.JsonFieldType.String);

    public static final VertxJsonUtils.JsonFieldValidator OPTIONAL_FIELDS =
            new VertxJsonUtils.JsonFieldValidator()
                    .append(FIELD_NAME_EXTERNAL_IMAGE_SERVER, VertxJsonUtils.JsonFieldType.JsonObject)
                    .append(FIELD_NAME_INTERNAL_PROXY, VertxJsonUtils.JsonFieldType.String)
                    .append(FIELD_NAME_DESCRIPTION, VertxJsonUtils.JsonFieldType.String);

    /**
     * An Organization is uniquely identified by "_id".
     */
    public static final String[] INDEX_FIELDS = {
            FIELD_NAME_ID,
            //FIELD_NAME_NAME,      // multiple organizations may have duplicate name, see CWMP-1273
            FIELD_NAME_URL,
            FIELD_NAME_API_CLIENT_USERNAME
    };

    /**
     * Editable Fields
     */
    public static final List<String> EDITABLE_FIELDS = new ArrayList<String>() {{
        add(FIELD_NAME_DESCRIPTION);
        add(FIELD_NAME_NAME);
        add(FIELD_NAME_URL);
        add(FIELD_NAME_USERNAME);
        add(FIELD_NAME_PASSWORD);
        add(FIELD_NAME_API_CLIENT_USERNAME);
        add(FIELD_NAME_API_CLIENT_PASSWORD);
        add(FIELD_NAME_EXTERNAL_IMAGE_SERVER);
    }};

    // The organization ID is maintained and generated by our own code.
    public String id;

    // Organization Name String
    public String name;

    // Organization Description String
    public String description;

    // ACS URL
    public String acsUrl;
    public String acsHostname = null;

    // ACS URL (the suffix portion only which is the org name by default)
    public String acsUrlSuffix;

    // ACS Credential
    public String acsUsername;
    public String acsPassword;

    // API Client Credential
    public String apiClientUsername;
    public String apiClientPassword;

    // External Image Server
    public ExternalFileServer extImageServer;

    // Internal Proxy
    public String internalProxy;

    /**
     * Constructor by a JSON Object.
     * @param jsonObject
     */
    public Organization(JsonObject jsonObject) {
        id = jsonObject.getString(FIELD_NAME_ID);
        name = jsonObject.getString(FIELD_NAME_NAME);
        description = jsonObject.getString(FIELD_NAME_DESCRIPTION);

        acsUrl = jsonObject.getString(FIELD_NAME_URL);
        try {
            URL tmpUrlPojo = new URL(acsUrl);
            acsHostname = tmpUrlPojo.getHost();
        } catch (Exception ex) {
            log.error("Illegal ACS URL " + acsUrl + "!");
        }

        acsUrlSuffix = acsUrl.substring(acsUrl.lastIndexOf("/"));
        acsUsername = jsonObject.getString(FIELD_NAME_USERNAME);
        acsPassword = jsonObject.getString(FIELD_NAME_PASSWORD);
        apiClientUsername = jsonObject.getString(FIELD_NAME_API_CLIENT_USERNAME);
        apiClientPassword = jsonObject.getString(FIELD_NAME_API_CLIENT_PASSWORD);

        JsonObject extServer = jsonObject.getJsonObject(FIELD_NAME_EXTERNAL_IMAGE_SERVER);
        if (extServer != null) {
            try {
                extImageServer = new ExternalFileServer(extServer);
            } catch (Exception e) {
                log.error("Invalid External Image Serve: " + extServer);
            }
        }

        internalProxy = jsonObject.getString(FIELD_NAME_INTERNAL_PROXY);
    }

    /**
     * toString() method that returns everything.
     */
    @Override
    public String toString() {
        return "org" + id + ":" + name + ", " + ", acsUrl:" + acsUrl
                + "acs credential:" + acsUsername + "|" + acsPassword;
    }

    /**
     * Inner class for external file server
     */
    public static class ExternalFileServer {
        public String baseUrl;
        public String username;
        public String password;

        public ExternalFileServer(JsonObject jsonObject) throws MalformedURLException {
            baseUrl = jsonObject.getString(FIELD_NAME_BASE_URL);
            URL urlPojo = new URL(baseUrl);

            /**
             * Add trailing "/" if not yet present
             */
            if (!baseUrl.endsWith("/")) {
                baseUrl = baseUrl + "/";
            }

            username = jsonObject.getString(FIELD_NAME_USERNAME);
            password = jsonObject.getString(FIELD_NAME_PASSWORD);
        }
    }
}
